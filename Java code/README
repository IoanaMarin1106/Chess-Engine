					PA Project - Chess Engine - Stage 1
-------------------------------------------------------------------------------
TEAM Creierul si cerebelii, consisting of:
	Ghiculescu Alexandru-Ionut, 325CB, aghiculesc@stud.acs.upb.ro
	Marin Ioana-Valentina, 325CB, ioana.marin1106@stud.acs.upb.ro
	Stiuca Roxana-Elena, 325CB, roxana_elena.stiuca@stud.acs.upb.ro
-------------------------------------------------------------------------------
COMPILING INSTRUCTIONS:
	make build -> create .class objects
	make run -> run executable
	java Game -> argument for Xboard Long engine->Engine command
	xboard -debug -fcp "java Game" -> run Xboard directly with our engine
-------------------------------------------------------------------------------
PROJECT STRUCTURE:
	Game is the main class of the project which consists of several input
	and output processing methods. The input is read line by line, and,
	depending on the first word read, it calls a certain method for that
	command.
	
	Bitboard is our engine's represention of the chessboard. Bitboards are
	efficient structures for keeping track of the positions of the pieces.
	Within it, there is one bitmap for each piece-type and color, held inside
	2 arrays, whitePieces and blackPieces. In Bitboard, there are methods
	for checking whether a move is valid or not and methods for generating
	a move. At this stage of the project, generateMove methods returns the
	first valid move found, not caring if it's even good or not.
	
	Move is a class with static methods, used mostly for checking the
	input format for a move command and for converting it into bitmaps, as
	well as for its reverse conversion.

	Piece is an abstract class, inherited by all types of pieces in a chess
	game. Within it, there are 2 enums for each color and each type a piece
	may have. The methods isValidMove and generateMoves are methods which
	call the correct methods based on the type of the piece.

	King inherits Piece and is used to generate a King's moves and to check
	whether a given move is valid for a King.

	Queen inherits Piece and is used to generate a Queen's moves and to check
	whether a given move is valid for a Queen. Seeing as a Queen piece
	moves as both a Bishop and a Rook, the Queen's methods calls the methods
	of these other 2 pieces.

	Rook inherits Piece and, additionally to generating moves and checking if
	a move is valid, has the meetCollision methods. Those are used to check
	wether a rook that moves several steps on either a line or a collumn
	doesn't have any other pieces in its way.

	Bishop inherits Piece and has similar methods as Rook.

	Knight inherits Piece and has methods to generate moves or to check a
	move's validity.

	Pawn inherits Piece and has a method for generating moves and 2 methods
	for checking a move's validity, depending on the color of the Pawn
	(white Pawns move upward, black Pawns move downward).

	Debug is a class used only for debugging and, while not necessary for
	running the project, we decided to leave it in the project seeing as
	we will use it for further stages (mainly the displayBoard method).
-------------------------------------------------------------------------------
ALGORITHM DESIGN:
	For this stage of the project, we didn't implement any aglorithms.
	Our engine finds any valid move and sends it to the Xboard and resigns
	when the King is in check or when it cannot find any other possible moves.

	While not an algorithm by itself, it may be notable that our engine uses
	bitboard representation for the pieces on the chessboard, representation
	which will aid us in further stages of the project.
-------------------------------------------------------------------------------
ONLINE RESOURCES:
	https://www.chessprogramming.org/Bitboards -> Bitboard representation
	https://www.gnu.org/software/xboard/engine-intf.html -> Xboard commands
	http://wbec-ridderkerk.nl/html/UCIProtocol.html -> UCI Protocol
	http://hgm.nubati.net/CECP.html -> Xboard Communication Protocol v2
-------------------------------------------------------------------------------
TEAM ORGANIZATION:
	We met up for the initial part, deciding on the classes together and
	writing a simple program to test our connection to the Xboard, so Game.java
	has been a combined effort.

	Roxana and Ioana worked together for Bitboard.java while Alexandru was our
	debugger, who set up Debug.java and also, our converter, who managed the
	Move.java file.

	There are a total of 6 pieces in a chessgame so we splited them up and
	each team member manages 2 pieces (for example, one member was in charge of
	Knight and Pawn).

	We used a private github repository in which we all comitted our parts.
	Also, we used a Google Drive where we kept track of our tasks, links used,
	the structure of the classes.
-------------------------------------------------------------------------------